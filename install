#!/bin/bash
# Set BASE_DIR reliably based on main.sh location
if command -v realpath >/dev/null 2>&1; then
  BASE_DIR="$(dirname "$(realpath "$0")")"
else
  # Fallback for systems without realpath
  BASE_DIR="$(cd "$(dirname "$0")" && pwd)"
fi

# Export BASE_DIR to be available in sourced files
export BASE_DIR
has_command() {
  command -v "$1" >/dev/null 2>&1
}
# Init setup
sudo apt update && sudo apt install -yqq curl git apt-transport-https ca-certificates gnupg-agent software-properties-common

# Install Docker repository and keys
if ! has_command docker; then
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

  sudo add-apt-repository \
    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) \
        stable" &&
    sudo apt update &&
    sudo apt install docker-ce docker-ce-cli containerd.io -yqq
fi

# docker-compose
if ! has_command "docker-compose"; then
  sudo curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose &&
    sudo chmod +x /usr/local/bin/docker-compose &&
    sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
fi

ask_info() {
  local prompt_message=$1 # Prompt message
  local default_value=$2  # Default value for the default option
  local user_input        # User input
  if [ -z "$default_value" ]; then
    read -rp "${prompt_message}: " user_input
  else
    read -rp "${prompt_message} [Default is: ${default_value}]: " user_input
  fi
  echo "${user_input:-$default_value}"
}
ask_confirm() {
  local ask_confirm_msg confirmation
  ask_confirm_msg=$1
  echo -ne "${ask_confirm_msg} (Y/N, empty as No, press [Ctrl+C (macOS: Control+C)] to quit proceed): "
  read -r confirmation
  [[ $confirmation =~ ^(Y|y|YES|yes|Yes|OK|ok)$ ]]
}
generate_password() {
  head -c 24 /dev/urandom | base64 | tr -dc 'a-zA-Z0-9' | head -c 36
}
wait_for_health() {
  local container_name="$1"
  local service_type="$2"
  local retry_count=0
  local max_retries=20

  while [ "$(docker inspect --format='{{.State.Health.Status}}' "$container_name" 2>/dev/null)" != "healthy" ]; do
    echo "${service_type} → ${container_name} is not healthy yet. Retrying..."
    sleep 5
    ((retry_count++))

    if [ "$retry_count" -ge "$max_retries" ]; then
      echo "${service_type} → ${container_name} failed to become healthy after ${max_retries} attempts. Please check logs and try again"
      echo "Check docker logs: docker -f ${container_name} failed to become healthy"
      return 1
    fi
  done

  echoO "${service_type} → ${container_name} is healthy"
}
update_credentials() {
  local WG_HOST WG_PORT WG_PASSWORD PIHOLE_TZ PIHOLE_WEBPASSWORD
  WG_HOST=$(ask_info "Enter WG_HOST" "dmad.nguyenanhung.com")
  WG_PORT=$(ask_info "Enter WG_PORT" "51820")
  WG_PASSWORD=$(ask_info "Enter WG_PASSWORD" "$(generate_password)")
  PIHOLE_TZ=$(ask_info "Enter PIHOLE_TZ" "Asia/Hong_Kong")
  PIHOLE_WEBPASSWORD=$(ask_info "Enter PIHOLE_WEBPASSWORD" "$(generate_password)")

  # Default environment
  local WG_DEFAULT_ADDRESS="10.6.0.x"
  local WG_DEFAULT_DNS="10.2.0.100,1.1.1.1"
  local WG_PERSISTENT_KEEPALIVE=25
  local PIHOLE_SERVERIP="10.2.0.100"
  local PIHOLE_DNS1="10.2.0.200"
  local PIHOLE_DNS2="1.1.1.1"

  # Create .env credentials
  cat >.env <<EOL
# wg-easy
WG_HOST=${WG_HOST}
PASSWORD=${WG_PASSWORD}
WG_PORT=${WG_PORT}
WG_DEFAULT_ADDRESS=${WG_DEFAULT_ADDRESS}
WG_DEFAULT_DNS=${WG_DEFAULT_DNS}
WG_PERSISTENT_KEEPALIVE=${WG_PERSISTENT_KEEPALIVE}
# Optional:
# - WG_ALLOWED_IPS=192.168.15.0/24, 10.0.1.0/24
# - WG_INTERFACE=wg0
# - WG_MTU=1420
# - WG_ALLOWED_IPS=192.168.15.0/24, 10.0.1.0/24
# - WG_PRE_UP=echo "Pre Up" > /etc/wireguard/pre-up.txt
# - WG_POST_UP=echo "Post Up" > /etc/wireguard/post-up.txt
# - WG_PRE_DOWN=echo "Pre Down" > /etc/wireguard/pre-down.txt
# - WG_POST_DOWN=echo "Post Down" > /etc/wireguard/post-down.txt

# pihole
PIHOLE_TZ=${PIHOLE_TZ}
PIHOLE_WEBPASSWORD=${PIHOLE_WEBPASSWORD}
PIHOLE_SERVERIP=${PIHOLE_SERVERIP}
PIHOLE_DNS1=${PIHOLE_DNS1}
PIHOLE_DNS2=${PIHOLE_DNS2}
EOL

  # Setting Caddyfile
  cat >Caddyfile <<EOL
# wg-easy
wireguard.${WG_HOST} {
    reverse_proxy 10.2.0.3:51821
}

# pihole
pihole.${WG_HOST} {
    reverse_proxy 10.2.0.100:80
}
EOL

  echo "Credentials updated successfully!"
  echo
  echo "----------------------------------------------------------------"
  echo "Generated .env and Caddyfile with the following values:"
  echo
  echo "----------------------------------------------------------------"
  echo
  echo "WG_HOST: ${WG_HOST}"
  echo "WG_PORT: ${WG_PORT}"
  echo "WG_PASSWORD: ${WG_PASSWORD}"
  echo "PIHOLE_TZ: ${PIHOLE_TZ}"
  echo "PIHOLE_WEBPASSWORD: ${PIHOLE_WEBPASSWORD}"
  echo
  echo "----------------------------------------------------------------"
  echo "Need to point DNS of domain names: ${WG_HOST}, wireguard.${WG_HOST}, pihole.${WG_HOST} to server IP $(curl -sSL https://checkip.amazonaws.com) first to complete configuration"
  echo "----------------------------------------------------------------"
  echo
}
update_credentials

if [ ! -f "${BASE_DIR}/.env" ]; then
  echo "Failed to update credentials"
  exit 1
fi

if [ ! -f "${BASE_DIR}/Caddyfile" ]; then
  echo "Failed to update Caddyfile"
  exit 1
fi

if ask_confirm "Do you confirm that you have pointed DNS to the above domains and want to install D.M ADS?"; then
  cd "$BASE_DIR" || {
    echo "Failed to change directory"
    exit 1
  }
  docker compose up -d
  wait_for_health "caddy" "Caddy Web Server"

  if docker ps --format '{{.Names}} {{.Status}}' | grep -E '^caddy .*Up'; then
    if ask_confirm "Do you want to enable Basic Auth for Wireguard and Pihole?"; then
      auth_username=$(ask_info "Enter a username for basic authentication" "admin")
      auth_password=$(ask_info "Enter a password for basic authentication" "$(generate_password)")
      hashed_password=$(docker exec -it caddy caddy hash-password --plaintext "${auth_password}" | tr -d '\r')
      echo "🔐 Hashed Password: $hashed_password"
      sed -i "/}/i \    basic_auth {\n        ${auth_username} ${auth_password}\n    }" "Caddyfile"
    else
      echo "❌ Basic Auth not enabled."
    fi
  else
    echo "❌ Caddy container is NOT running!"
  fi
else
  if [ -f "${BASE_DIR}/.env" ]; then
    rm -f "${BASE_DIR}/.env"
  fi
  if [ -f "${BASE_DIR}/Caddyfile" ]; then
    rm -f "${BASE_DIR}/Caddyfile"
  fi
  echo "Process cancelled! "
  exit
fi
