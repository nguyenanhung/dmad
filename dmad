#!/bin/bash
# Set BASE_DIR reliably based on main.sh location
if command -v realpath >/dev/null 2>&1; then
  BASE_DIR="$(dirname "$(realpath "$0")")"
else
  # Fallback for systems without realpath
  BASE_DIR="$(cd "$(dirname "$0")" && pwd)"
fi

# Export BASE_DIR to be available in sourced files
export BASE_DIR
SERVER_IP=$(curl -sSL https://checkip.amazonaws.com)
DMAD_PRIVATE_NETWORK_NAME="dmad_private_network"
DMAD_PRIVATE_NETWORK_SUBNET="10.2.0.0/24"

has_command() {
  command -v "$1" >/dev/null 2>&1
}
trim() {
  local input="$1"
  echo "$input" | sed 's/^[ \t]*//;s/[ \t]*$//'
}
ask_info() {
  local prompt_message=$1 # Prompt message
  local default_value=$2  # Default value for the default option
  local user_input        # User input
  if [ -z "$default_value" ]; then
    read -rp "${prompt_message}: " user_input
  else
    read -rp "${prompt_message} [Default is: ${default_value}]: " user_input
  fi
  echo "${user_input:-$default_value}"
}
ask_confirm() {
  local ask_confirm_msg confirmation
  ask_confirm_msg=$1
  echo -ne "${ask_confirm_msg} (Y/N, empty as No, press [Ctrl+C (macOS: Control+C)] to quit proceed): "
  read -r confirmation
  [[ $confirmation =~ ^(Y|y|YES|yes|Yes|OK|ok)$ ]]
}
generate_password() {
  head -c 24 /dev/urandom | base64 | tr -dc 'a-zA-Z0-9' | head -c 36
}
wait_for_health() {
  local container_name="$1"
  local service_type="$2"
  local retry_count=0
  local max_retries=18

  while [ "$(docker inspect --format='{{.State.Health.Status}}' "$container_name" 2>/dev/null)" != "healthy" ]; do
    echo "${service_type} → ${container_name} is not healthy yet. Waiting..."
    sleep 10
    ((retry_count++))

    if [ "$retry_count" -ge "$max_retries" ]; then
      echo "${service_type} → ${container_name} failed to become healthy after ${max_retries} attempts. Please check logs and try again"
      echo "Check docker logs: docker -f ${container_name} failed to become healthy"
      return 1
    fi
  done

  echo "${service_type} → ${container_name} is healthy"
}
docker_compose_command() {
  if ! has_command docker; then
    echo "❌ Error: Docker is not installed." >&2
  fi
  if has_command docker-compose; then
    docker-compose "$@"
  elif docker compose version >/dev/null 2>&1; then
    docker compose "$@"
  else
    echo "❌ Error: Neither 'docker-compose' nor 'docker compose' is installed." >&2
    return 1
  fi
}
write_base_caddyfile() {
  cat <<EOL
{
    # Global options
    admin off
    persist_config off
}
# Configure caching for static files
(file_static_caching) {
    @static {
        path *.ico *.css *.js *.gif *.jpg *.jpeg *.png *.svg *.woff *.json
    }
    header @static Cache-Control max-age=2592000
}
# Security restrictions for sensitive files
(file_forbidden_restricted) {
    @forbidden {
        not path /wp-includes/ms-files.php
        path /wp-admin/includes/*.php
        path /wp-includes/*.php
        path /wp-config.php
        path /wp-content/uploads/*.php
        path /wp-content/debug.log
        path /.user.ini
        path /.env
        path /storage/logs/laravel.log
    }
    respond @forbidden "Access denied" 403
}

# Site configurations will be imported below
import sites/*.caddy
EOL
}
write_caddy_https_config() {
  local DOMAIN="$1"
  local SITE_DIR="${BASE_DIR}/sites"
  mkdir -p "${SITE_DIR}" # Create the 'sites' directory if it doesn't exist
  cat >"${SITE_DIR}"/dmad.caddy <<EOL
# Configuration for wg-easy reverse proxy
wireguard.${DOMAIN} {
    reverse_proxy 10.2.0.3:51821
}

# Configuration for pihole reverse proxy
pihole.${DOMAIN} {
    reverse_proxy 10.2.0.100:80
}
EOL
}
write_caddy_dmad_basic_auth() {
  local DOMAIN="$1"
  local USERNAME="$2"
  local HASHED_PASSWORD="$3"
  local SITE_DIR="${BASE_DIR}/sites"
  mkdir -p "${SITE_DIR}" # Create the 'sites' directory if it doesn't exist
  cat >"${SITE_DIR}"/dmad.caddy <<EOL
# Configuration for wg-easy reverse proxy
wireguard.${DOMAIN} {
    @acme_challenge {
        path /.well-known/acme-challenge/*
    }
    handle @acme_challenge {
        file_server
    }

    basic_auth {
        ${USERNAME} ${HASHED_PASSWORD}
    }
    reverse_proxy 10.2.0.3:51821
}

# Configuration for pihole reverse proxy
pihole.${DOMAIN} {
    @acme_challenge {
        path /.well-known/acme-challenge/*
    }
    handle @acme_challenge {
        file_server
    }

    basic_auth {
        ${USERNAME} ${HASHED_PASSWORD}
    }
    reverse_proxy 10.2.0.100:80
}
EOL
}
caddy_validate() {
  local CADDY_NAME="caddy"
  if [ -e "${BASE_DIR}/.env" ]; then
    source .env
  fi
  if [ -n "$EXISTS_CADDY_CONTAINER" ] && [ -n "$CADDY_CONTAINER_NAME" ] && [[ "$EXISTS_CADDY_CONTAINER" == "YES" ]]; then
    if docker inspect "${CADDY_CONTAINER_NAME}" >/dev/null 2>&1; then
      CADDY_NAME="${CADDY_CONTAINER_NAME}"
    fi
  fi
  docker exec "${CADDY_NAME}" caddy validate --config "/etc/caddy/Caddyfile"
}
caddy_reload() {
  local CADDY_NAME="caddy"
  if [ -e "${BASE_DIR}/.env" ]; then
    source .env
  fi
  if [ -n "$EXISTS_CADDY_CONTAINER" ] && [ -n "$CADDY_CONTAINER_NAME" ] && [[ "$EXISTS_CADDY_CONTAINER" == "YES" ]]; then
    if docker inspect "${CADDY_CONTAINER_NAME}" >/dev/null 2>&1; then
      CADDY_NAME="${CADDY_CONTAINER_NAME}"
    fi
  fi
  echo "🔄 Reloading Caddy Web Server..."
  if docker restart "${CADDY_NAME}"; then
    echo "✅ Caddy reloaded successfully"
  else
    echo "❌ Failed to reload Caddy Web Server. Please check logs Caddy container"
    docker logs "${CADDY_NAME}" --tail 50
    return 1
  fi
}
restart_caddy() {
  if caddy_validate; then
    caddy_reload
  else
    echo "Caddy Web Server configuration is not valid"
    return 1
  fi
}
install_packages() {
  echo "----------------------------------------------------------------"
  echo "Server Initial Setup"
  echo "----------------------------------------------------------------"
  echo
  # Init setup
  sudo apt update && sudo apt install -yqq curl git apt-transport-https ca-certificates gnupg-agent software-properties-common

  # Install Docker repository and keys
  if ! has_command docker; then
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    sudo add-apt-repository \
      "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) \
        stable" &&
      sudo apt update &&
      sudo apt install docker-ce docker-ce-cli containerd.io -yqq
  fi

  # docker-compose
  if ! has_command "docker-compose"; then
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose &&
      sudo chmod +x /usr/local/bin/docker-compose &&
      sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
  fi
}
create_dmad_network() {
  local DM_ADS_NETWORK_NAME="${DMAD_PRIVATE_NETWORK_NAME}"
  if [ -e "${BASE_DIR}/.env" ]; then
    source .env
  fi

  if [ -n "$DMAD_NETWORK" ]; then
    DM_ADS_NETWORK_NAME="${DMAD_NETWORK}"
  fi

  if ! docker network ls --format '{{.Name}}' | grep -q "^${DM_ADS_NETWORK_NAME}$"; then
    echo "🚀 Create network ${DM_ADS_NETWORK_NAME} with subnet ${DMAD_PRIVATE_NETWORK_SUBNET}..."
    docker network create \
      --driver=bridge \
      --subnet=${DMAD_PRIVATE_NETWORK_SUBNET} \
      "${DM_ADS_NETWORK_NAME}"
  else
    echo "👌 Network ${DM_ADS_NETWORK_NAME} already exists"
  fi
}
pull_wg_easy_latest() {
  if ! docker image inspect ghcr.io/wg-easy/wg-easy >/dev/null 2>&1; then
    docker pull ghcr.io/wg-easy/wg-easy
  fi
}
install_credentials() {
  local ON_LOCAL SERVER_IP DMAD_DOMAIN WG_HOST WIREGUARD_URL WG_PASSWORD WG_PASSWORD_HASH PIHOLE_URL PIHOLE_TZ PIHOLE_WEBPASSWORD
  SERVER_IP=$(curl -sSL https://checkip.amazonaws.com)
  WIREGUARD_URL="http://0.0.0.0:51821"
  PIHOLE_URL="http://10.2.0.100/admin"
  echo
  echo "----------------------------------------------------------------"
  echo "Install credentials for DMAD Service"
  echo "----------------------------------------------------------------"
  echo
  DMAD_DOMAIN=$(ask_info "Enter DMAD_DOMAIN" "dmad.your.host")

  # Setting the wireguard host endpoint
  WG_HOST=$(ask_info "Enter WG_HOST" "$SERVER_IP")

  if ask_confirm "Are you installing on Server/VPS environment?"; then
    ON_LOCAL="NO"
    if ask_confirm "If you have a domain name and plan to use DNS domain name instead of real IP. Make sure you point the domains wireguard.${DMAD_DOMAIN}, pihole.${DMAD_DOMAIN} to ${SERVER_IP}."; then
      WIREGUARD_URL="https://wireguard.${DMAD_DOMAIN}"
      PIHOLE_URL="https://pihole.${DMAD_DOMAIN}"
    fi
    if ask_confirm "Do you want to change WG_HOST to ${DMAD_DOMAIN}? (Original: ${SERVER_IP})"; then
      WG_HOST="${DMAD_DOMAIN}"
    fi
  else
    ON_LOCAL="YES"
    local DYNAMIC_DNS_SERVER
    DYNAMIC_DNS_SERVER=$(ask_info "If you are installing this script on a local computer or raspberry pi, home-lab then you may need to use a dynamic DNS provider solution. Enter your dynamic DNS provider address." "my.ddns.net")
    WG_HOST="${DYNAMIC_DNS_SERVER}"
  fi

  local CURRENT_TIMEZONE
  CURRENT_TIMEZONE=$(timedatectl show --property=Timezone --value)
  if [ -z "$CURRENT_TIMEZONE" ]; then
    CURRENT_TIMEZONE="Asia/Singapore"
  fi
  PIHOLE_TZ=$(ask_info "Enter PIHOLE_TZ" "${CURRENT_TIMEZONE}")
  PIHOLE_WEBPASSWORD=$(ask_info "Enter PIHOLE_WEBPASSWORD" "$(generate_password)")
  WG_PASSWORD=$(ask_info "Enter WG_PASSWORD" "$(generate_password)")

  WG_PASSWORD_HASH=$(python3 -c "import bcrypt; print(bcrypt.hashpw(b'${WG_PASSWORD}', bcrypt.gensalt(12)).decode())")
  WG_PASSWORD_HASH=$(trim "$WG_PASSWORD_HASH")

  local EXISTS_CADDY_CONTAINER="NO"
  local CADDY_CONTAINER_NAME="caddy"
  local CADDY_CONTAINER_NETWORK_NAME=""
  if ask_confirm "Yes if you already have a Caddy Web Server on your server!"; then
    EXISTS_CADDY_CONTAINER="YES"
    CADDY_CONTAINER_NAME=$(ask_info "Enter your exists Caddy Web Server Container Name" "bear_caddy")
    CADDY_CONTAINER_NETWORK_NAME=$(ask_info "Enter your Caddy Web Server Container Name Network Name" "bear_caddy_net")
  fi

  # Default environment
  local WG_PORT="51820"
  local WG_DEFAULT_ADDRESS="10.6.0.x"
  local WG_DEFAULT_DNS="10.2.0.100,1.1.1.1"
  local WG_PERSISTENT_KEEPALIVE=25
  local PIHOLE_SERVERIP="10.2.0.100"
  local PIHOLE_DNS1="10.2.0.200"
  local PIHOLE_DNS2="1.1.1.1"

  if [ -f "${BASE_DIR}/.env" ]; then
    rm -f "${BASE_DIR}/.env"
  fi
  # Create .env credentials
  cat >.env <<EOL
# dmad
DMAD_DOMAIN=${DMAD_DOMAIN}
DMAD_NETWORK=${DMAD_PRIVATE_NETWORK_NAME}
DMAD_NETWORK_SUBNET=${DMAD_PRIVATE_NETWORK_SUBNET}
ON_LOCAL=${ON_LOCAL}
EXISTS_CADDY_CONTAINER=${EXISTS_CADDY_CONTAINER}
CADDY_CONTAINER_NAME=${CADDY_CONTAINER_NAME}
CADDY_CONTAINER_NETWORK_NAME=${CADDY_CONTAINER_NETWORK_NAME}

# wg-easy
WIREGUARD_URL=${WIREGUARD_URL}
WG_HOST=${WG_HOST}
PASSWORD_HASH='${WG_PASSWORD_HASH}' # Original PASSWORD=${WG_PASSWORD}
WG_PORT=${WG_PORT}
WG_DEFAULT_ADDRESS=${WG_DEFAULT_ADDRESS}
WG_DEFAULT_DNS=${WG_DEFAULT_DNS}
WG_PERSISTENT_KEEPALIVE=${WG_PERSISTENT_KEEPALIVE}
# Optional:
# - WG_ALLOWED_IPS=192.168.15.0/24, 10.0.1.0/24
# - WG_INTERFACE=wg0
# - WG_MTU=1420
# - WG_PRE_UP=echo "Pre Up" > /etc/wireguard/pre-up.txt
# - WG_POST_UP=echo "Post Up" > /etc/wireguard/post-up.txt
# - WG_PRE_DOWN=echo "Pre Down" > /etc/wireguard/pre-down.txt
# - WG_POST_DOWN=echo "Post Down" > /etc/wireguard/post-down.txt

# pihole
PIHOLE_URL=${PIHOLE_URL}
PIHOLE_TZ=${PIHOLE_TZ}
PIHOLE_WEBPASSWORD=${PIHOLE_WEBPASSWORD}
PIHOLE_SERVERIP=${PIHOLE_SERVERIP}
PIHOLE_DNS1=${PIHOLE_DNS1}
PIHOLE_DNS2=${PIHOLE_DNS2}
EOL

  # Setting Caddyfile
  if [[ "$EXISTS_CADDY_CONTAINER" == "NO" ]]; then
    true >Caddyfile # Clear existing content
    write_base_caddyfile >>Caddyfile
    if ask_confirm "Do you want to enable Caddy HTTPS for wireguard and pihole? (NOTE: If you install this script on a local computer or raspberry pi, home-lab, you can skip this option to use the local IP.)"; then
      write_caddy_https_config "${DMAD_DOMAIN}"
    fi
  fi

  echo "Credentials updated successfully!"
  echo
  echo "----------------------------------------------------------------"
  echo "Generated .env and Caddyfile with the following values:"
  echo
  echo "----------------------------------------------------------------"
  echo
  echo "DMAD_DOMAIN: ${DMAD_DOMAIN}"
  echo "WG_HOST: ${WG_HOST}"
  echo
  echo "WIREGUARD_URL: ${WIREGUARD_URL}"
  echo "WG_PORT: ${WG_PORT}"
  echo "WG_PASSWORD: ${WG_PASSWORD}"
  echo
  echo "PIHOLE_URL: ${PIHOLE_URL}"
  echo "PIHOLE_TZ: ${PIHOLE_TZ}"
  echo "PIHOLE_WEBPASSWORD: ${PIHOLE_WEBPASSWORD}"
  echo
  echo "----------------------------------------------------------------"
  echo "Need to point DNS of domain names: ${DMAD_DOMAIN}, wireguard.${DMAD_DOMAIN}, pihole.${DMAD_DOMAIN} to server IP ${SERVER_IP} first to complete configuration"
  echo "----------------------------------------------------------------"
  echo
}
update_basic_auth() {
  if ask_confirm "Enable/Update Basic Authentication for Wireguard and Pihole?"; then
    local username password hashed_password
    username=$(ask_info "Enter a username for basic authentication" "admin")
    password=$(ask_info "Enter a password for basic authentication" "$(generate_password)")
    hashed_password=$(docker exec -it caddy caddy hash-password --plaintext "${password}" | tr -d '\r')
    echo "🔐 Hashed Password: ${hashed_password}"

    wait_for_health "caddy" "Caddy Web Server"

    if docker ps --format '{{.Names}} {{.Status}}' | grep -E '^caddy .*Up'; then
      if ask_confirm "Do you want to enable Basic Auth for Wireguard and Pihole?"; then
        source .env
        write_caddy_dmad_basic_auth "${DMAD_DOMAIN}" "${username}" "${hashed_password}"
        restart_caddy
        wait_for_health "caddy" "Caddy Web Server"
        echo "✅ Enable Basic Authentication success"
        echo
        echo "--------------------------------"
        echo "Username: ${username}"
        echo "Password: ${password}"
        echo "Hashed password: ${hashed_password}"
        echo "--------------------------------"
        echo
        exit
      else
        echo "❌ Basic Auth not enabled."
        exit
      fi
    else
      echo "❌ Caddy container is NOT running!"
      exit
    fi
  else
    exit 1
  fi
}

wait_dmad_for_health() {
  wait_for_health "wg-easy" "Wireguard VPN Server"
  wait_for_health "unbound" "Unbound DNS Resolver"
  wait_for_health "pihole" "Pi-hole Network-wide Ad Blocking"
}
dmad_up_start_on_local() {
  if [ ! -f "${BASE_DIR}/.env" ]; then
    echo "Failed to update credentials"
    exit 1
  fi
  cd "$BASE_DIR" || {
    echo "Failed to change directory"
    exit 1
  }
  source .env
  if [[ "$ON_LOCAL" == "YES" ]]; then
    if [ ! -e "${BASE_DIR}/docker-compose-on-local.yml" ]; then
      echo -e "ERROR: Docker compose file it not exits. Please make sure file ${BASE_DIR}/docker-compose-on-local.yml exits"
      exit 1
    fi
    create_dmad_network
    docker_compose_command -f "${BASE_DIR}/docker-compose-on-local.yml" up -d
    wait_dmad_for_health
    wait_for_health "caddy" "Caddy Web Server"
  fi
}
dmad_up_start_without_caddy() {
  if [ ! -f "${BASE_DIR}/.env" ]; then
    echo "Failed to update credentials"
    exit 1
  fi
  cd "$BASE_DIR" || {
    echo "Failed to change directory"
    exit 1
  }
  source .env
  if [[ "$ON_LOCAL" == "NO" ]]; then
    WITHOUT_CADDY="NO"
    if [ -n "$EXISTS_CADDY_CONTAINER" ] && [ -n "$CADDY_CONTAINER_NAME" ] && [[ "$EXISTS_CADDY_CONTAINER" == "YES" ]]; then
      WITHOUT_CADDY="YES"
    fi

    # If an external Caddy Web Server already exists, there is no need to check the Caddy Web Server configuration!
    if [ "$WITHOUT_CADDY" = "NO" ] && [ ! -f "${BASE_DIR}/Caddyfile" ]; then
      echo "Failed to update Caddyfile"
      exit 1
    fi
    if [[ "$WITHOUT_CADDY" == "YES" ]] && [ -n "$CADDY_CONTAINER_NAME" ]; then
      if [ ! -e "${BASE_DIR}/docker-compose-without-caddy.yml" ]; then
        echo -e "ERROR: Docker compose file it not exits. Please make sure file ${BASE_DIR}/docker-compose-without-caddy.yml exits"
        exit 1
      fi
      create_dmad_network
      docker_compose_command -f "${BASE_DIR}/docker-compose-without-caddy.yml" up -d
      wait_dmad_for_health
      # Connect Caddy Network
      if [ -n "$CADDY_CONTAINER_NAME" ] && [ "$EXISTS_CADDY_CONTAINER" = "YES" ]; then
        if ! docker network inspect "${DMAD_NETWORK}" | grep -q "\"Name\": \"${CADDY_CONTAINER_NAME}\""; then
          docker network connect "${DMAD_NETWORK}" "${CADDY_CONTAINER_NAME}"
          echo -e "➡️ Caddy Web Server container Joining to Caddy Network ${DMAD_NETWORK} success"
        fi
      fi
    else
      echo -e "Error configuring docker Caddy"
      echo "WITHOUT_CADDY: ${WITHOUT_CADDY}"
      echo "CADDY_CONTAINER_NAME: ${CADDY_CONTAINER_NAME}"
    fi
  fi
}
dmad_up_start_with_caddy() {
  if [ ! -f "${BASE_DIR}/.env" ]; then
    echo "Failed to update credentials"
    exit 1
  fi
  cd "$BASE_DIR" || {
    echo "Failed to change directory"
    exit 1
  }
  source .env
  if [[ "$ON_LOCAL" == "NO" ]]; then
    WITHOUT_CADDY="NO"
    if [ -n "$EXISTS_CADDY_CONTAINER" ] && [ -n "$CADDY_CONTAINER_NAME" ] && [[ "$EXISTS_CADDY_CONTAINER" == "YES" ]]; then
      WITHOUT_CADDY="YES"
    fi

    # If an external Caddy Web Server already exists, there is no need to check the Caddy Web Server configuration!
    if [ "$WITHOUT_CADDY" = "NO" ] && [ ! -f "${BASE_DIR}/Caddyfile" ]; then
      echo "Failed to update Caddyfile"
      exit 1
    fi
    if [[ "$WITHOUT_CADDY" == "YES" ]] && [ -n "$CADDY_CONTAINER_NAME" ]; then
      echo -e "Error configuring docker Caddy"
      echo "WITHOUT_CADDY: ${WITHOUT_CADDY}"
      echo "CADDY_CONTAINER_NAME: ${CADDY_CONTAINER_NAME}"
    else
      if [ ! -e "${BASE_DIR}/docker-compose-with-caddy.yml" ]; then
        echo -e "ERROR: Docker compose file it not exits. Please make sure file ${BASE_DIR}/docker-compose-with-caddy.yml exits"
        exit 1
      fi
      create_dmad_network
      docker_compose_command -f "${BASE_DIR}/docker-compose-with-caddy.yml" up -d
      wait_dmad_for_health
      wait_for_health "caddy" "Caddy Web Server"
    fi
  fi
}

case "$1" in
--install | -install | install | i)
  install_packages
  install_credentials

  if [ ! -f "${BASE_DIR}/.env" ]; then
    echo "Failed to update credentials"
    exit 1
  fi
  source .env

  WITHOUT_CADDY="NO"
  if [ -n "$EXISTS_CADDY_CONTAINER" ] && [ -n "$CADDY_CONTAINER_NAME" ] && [[ "$EXISTS_CADDY_CONTAINER" == "YES" ]]; then
    WITHOUT_CADDY="YES"
  fi

  # If an external Caddy Web Server already exists, there is no need to check the Caddy Web Server configuration!
  if [ "$WITHOUT_CADDY" = "NO" ] && [ ! -f "${BASE_DIR}/Caddyfile" ]; then
    echo "Failed to update Caddyfile"
    exit 1
  fi

  cd "$BASE_DIR" || {
    echo "Failed to change directory"
    exit 1
  }

  if [[ "$ON_LOCAL" == "YES" ]]; then
    if ask_confirm "We noticed you are configuring D.M ADS from local computer or raspberry pi, home-lab environment. Scripts will automatically open ports for wireguard portal. Do you agree?"; then
      if [ ! -e "${BASE_DIR}/docker-compose-on-local.yml" ]; then
        echo -e "ERROR: Docker compose file it not exits. Please make sure file ${BASE_DIR}/docker-compose-on-local.yml exits"
        exit 1
      fi
      create_dmad_network
      docker_compose_command -f "${BASE_DIR}/docker-compose-on-local.yml" up -d
      wait_dmad_for_health
      wait_for_health "caddy" "Caddy Web Server"
      update_basic_auth # Update basic authentication
    else
      if [ -f "${BASE_DIR}/.env" ]; then
        rm -f "${BASE_DIR}/.env"
      fi
      if [ -f "${BASE_DIR}/Caddyfile" ]; then
        rm -f "${BASE_DIR}/Caddyfile"
      fi
      echo "Process cancelled! "
      exit
    fi
  else
    # Start the DMAD Container
    if [[ "$WITHOUT_CADDY" == "YES" ]] && [ -n "$CADDY_CONTAINER_NAME" ]; then
      if [ ! -e "${BASE_DIR}/docker-compose-without-caddy.yml" ]; then
        echo -e "ERROR: Docker compose file it not exits. Please make sure file ${BASE_DIR}/docker-compose-without-caddy.yml exits"
        exit 1
      fi
      create_dmad_network
      docker_compose_command -f "${BASE_DIR}/docker-compose-without-caddy.yml" up -d
      wait_dmad_for_health
      # Connect Caddy Network
      if [ -n "$CADDY_CONTAINER_NAME" ] && [ "$EXISTS_CADDY_CONTAINER" = "YES" ]; then
        if ! docker network inspect "${DMAD_NETWORK}" | grep -q "\"Name\": \"${CADDY_CONTAINER_NAME}\""; then
          docker network connect "${DMAD_NETWORK}" "${CADDY_CONTAINER_NAME}"
          echo -e "➡️ Caddy Web Server container Joining to Caddy Network ${DMAD_NETWORK} success"
        fi
      fi
      echo "----------------------------------------------------------------"
      echo
      echo -e "✅ D.M ADS service installation is complete."
      echo
      echo -e "➡️ Since you have provided information that you have Caddy Web Server installed, the system will not automatically install Caddy. If you want to configure domain for Wireguard and Pi-hole, you need to configure it manually in your Caddy Web Server!"
      echo
      echo -e "👉 Proceed to point domain ${WIREGUARD_URL} and ${PIHOLE_URL} to IP ${SERVER_IP}"
      echo
      echo -e "👉 Configure Caddy Web Server sites with the following information"
      echo
      echo -e "➡️ First, you need to allow Caddy Web Server container ${CADDY_CONTAINER_NAME} connect to ${DMAD_NETWORK}"
      echo -e "and, you need to configure reverse proxy for the wireguard and Pi-hole on the Caddy Web Server"
      echo -e "➡️ wireguard.${DMAD_DOMAIN} -> reverse_proxy to wg-easy:51821"
      echo -e "➡️ pihole.${DMAD_DOMAIN} -> reverse_proxy to pihole:80"
      echo
      echo "----------------------------------------------------------------"
    else
      if ask_confirm "Do you confirm that you have pointed DNS to the above domains and want to install D.M ADS?"; then
        if [ ! -e "${BASE_DIR}/docker-compose-with-caddy.yml" ]; then
          echo -e "ERROR: Docker compose file it not exits. Please make sure file ${BASE_DIR}/docker-compose-with-caddy.yml exits"
          exit 1
        fi
        create_dmad_network
        docker_compose_command -f "${BASE_DIR}/docker-compose-with-caddy.yml" up -d
        wait_dmad_for_health
        wait_for_health "caddy" "Caddy Web Server"
        update_basic_auth # Update basic authentication
      else
        if [ -f "${BASE_DIR}/.env" ]; then
          rm -f "${BASE_DIR}/.env"
        fi
        if [ -f "${BASE_DIR}/Caddyfile" ]; then
          rm -f "${BASE_DIR}/Caddyfile"
        fi
        echo "Process cancelled! "
        exit
      fi
    fi
  fi
  ;;
--basic-auth | -basic-auth | basic-auth | --auth | -auth | auth | a)
  if [ ! -f "${BASE_DIR}/.env" ]; then
    echo ".env credentials is not available. Please sure you install dmad first"
    exit 1
  fi
  if [ ! -f "${BASE_DIR}/Caddyfile" ]; then
    echo "Caddyfile credentials is not available. Please sure you install dmad first"
    exit 1
  fi
  update_basic_auth
  ;;
--reload-caddy | -reload-caddy | reload-caddy | --caddy-reload | -caddy-reload | caddy-reload | r)
  restart_caddy
  exit
  ;;
--log | -log | log)
  if [ -n "$2" ]; then
    echo "Fetch docker logs from $2"
    docker logs -f "$2"
  else
    docker logs -f caddy
  fi
  exit
  ;;
--status | -status | status)
  docker ps
  exit
  ;;
--down | -down | down)
  if [ ! -f "${BASE_DIR}/.env" ]; then
    echo "Failed to update credentials"
    exit 1
  fi
  cd "$BASE_DIR" || {
    echo "Failed to change directory"
    exit 1
  }
  source .env
  if [[ "$ON_LOCAL" == "YES" ]]; then
    docker_compose_command -f "${BASE_DIR}/docker-compose-on-local.yml" down
  else
    WITHOUT_CADDY="NO"
    if [ -n "$EXISTS_CADDY_CONTAINER" ] && [ -n "$CADDY_CONTAINER_NAME" ] && [[ "$EXISTS_CADDY_CONTAINER" == "YES" ]]; then
      WITHOUT_CADDY="YES"
    fi
    if [ "$WITHOUT_CADDY" = "YES" ]; then
      docker_compose_command -f "${BASE_DIR}/docker-compose-without-caddy.yml" down
    else
      docker_compose_command -f "${BASE_DIR}/docker-compose-with-caddy.yml" down
    fi
  fi
  exit
  ;;
--up | -up | up)
  if [ ! -f "${BASE_DIR}/.env" ]; then
    echo "Failed to update credentials"
    exit 1
  fi
  cd "$BASE_DIR" || {
    echo "Failed to change directory"
    exit 1
  }

  source .env
  if [[ "$ON_LOCAL" == "YES" ]]; then
    dmad_up_start_on_local
  else
    WITHOUT_CADDY="NO"
    if [ -n "$EXISTS_CADDY_CONTAINER" ] && [ -n "$CADDY_CONTAINER_NAME" ] && [[ "$EXISTS_CADDY_CONTAINER" == "YES" ]]; then
      WITHOUT_CADDY="YES"
    fi

    # If an external Caddy Web Server already exists, there is no need to check the Caddy Web Server configuration!
    if [ "$WITHOUT_CADDY" = "NO" ] && [ ! -f "${BASE_DIR}/Caddyfile" ]; then
      echo "Failed to update Caddyfile"
      exit 1
    fi
    if [[ "$WITHOUT_CADDY" == "YES" ]] && [ -n "$CADDY_CONTAINER_NAME" ]; then
      dmad_up_start_without_caddy
    else
      dmad_up_start_with_caddy
    fi
  fi
  exit
  ;;
--up-with-caddy | -up-with-caddy | up-with-caddy)
  if [ ! -f "${BASE_DIR}/.env" ]; then
    echo "Failed to update credentials"
    exit 1
  fi
  cd "$BASE_DIR" || {
    echo "Failed to change directory"
    exit 1
  }
  source .env
  if [[ "$ON_LOCAL" == "YES" ]]; then
    dmad_up_start_on_local
  else
    WITHOUT_CADDY="NO"
    if [ -n "$EXISTS_CADDY_CONTAINER" ] && [ -n "$CADDY_CONTAINER_NAME" ] && [[ "$EXISTS_CADDY_CONTAINER" == "YES" ]]; then
      WITHOUT_CADDY="YES"
    fi

    # If an external Caddy Web Server already exists, there is no need to check the Caddy Web Server configuration!
    if [ "$WITHOUT_CADDY" = "NO" ] && [ ! -f "${BASE_DIR}/Caddyfile" ]; then
      echo "Failed to update Caddyfile"
      exit 1
    fi
    dmad_up_start_with_caddy
  fi
  exit
  ;;
--up-without-caddy | -up-without-caddy | up-without-caddy)
  if [ ! -f "${BASE_DIR}/.env" ]; then
    echo "Failed to update credentials"
    exit 1
  fi
  cd "$BASE_DIR" || {
    echo "Failed to change directory"
    exit 1
  }
  source .env
  if [[ "$ON_LOCAL" == "YES" ]]; then
    dmad_up_on_local
  else
    WITHOUT_CADDY="NO"
    if [ -n "$EXISTS_CADDY_CONTAINER" ] && [ -n "$CADDY_CONTAINER_NAME" ] && [[ "$EXISTS_CADDY_CONTAINER" == "YES" ]]; then
      WITHOUT_CADDY="YES"
    fi

    # If an external Caddy Web Server already exists, there is no need to check the Caddy Web Server configuration!
    if [ "$WITHOUT_CADDY" = "NO" ] && [ ! -f "${BASE_DIR}/Caddyfile" ]; then
      echo "Failed to update Caddyfile"
      exit 1
    fi

    dmad_up_start_without_caddy
  fi
  exit
  ;;
--join-caddy-network | -join-caddy-network | join-caddy-network)
  if [ ! -f "${BASE_DIR}/.env" ]; then
    echo "Failed to update credentials"
    exit 1
  fi
  cd "$BASE_DIR" || {
    echo "Failed to change directory"
    exit 1
  }
  source .env
  # Connect Caddy Network
  if [ -z "$CADDY_CONTAINER_NETWORK_NAME" ]; then
    CADDY_CONTAINER_NETWORK_NAME=$(ask_info "Enter your Caddy Web Server Container Name Network Name" "bear_caddy_net")
  fi
  if [ -z "$CADDY_CONTAINER_NETWORK_NAME" ]; then
    echo -e "❌ Caddy Web Server network it not available. Please make sure it is available and try again!"
    exit 1
  fi
  if [ -n "$CADDY_CONTAINER_NAME" ] && [ "$EXISTS_CADDY_CONTAINER" = "YES" ]; then
    if ! docker network inspect "${DMAD_NETWORK}" | grep -q "\"Name\": \"${CADDY_CONTAINER_NAME}\""; then
      docker network connect "${DMAD_NETWORK}" "${CADDY_CONTAINER_NAME}"
      echo -e "➡️ Caddy Web Server container Joining to Caddy Network ${DMAD_NETWORK} success"
    fi
  fi
  exit
  ;;
--enable-domain-external-caddy | -enable-domain-external-caddy | enable-domain-external-caddy)
  if [ ! -f "${BASE_DIR}/.env" ]; then
    echo "Failed to update credentials"
    exit 1
  fi
  cd "$BASE_DIR" || {
    echo "Failed to change directory"
    exit 1
  }
  source .env

  WITHOUT_CADDY="NO"
  if [ -n "$EXISTS_CADDY_CONTAINER" ] && [ -n "$CADDY_CONTAINER_NAME" ] && [[ "$EXISTS_CADDY_CONTAINER" == "YES" ]]; then
    WITHOUT_CADDY="YES"
  fi

  if [ "$WITHOUT_CADDY" = "NO" ]; then
    echo "Failed to continue. You not enable external caddy configure"
    exit 1
  fi
  # Connect Caddy Network
  if [ -n "$CADDY_CONTAINER_NAME" ] && [ "$EXISTS_CADDY_CONTAINER" = "YES" ]; then
    if ! docker network inspect "${DMAD_NETWORK}" | grep -q "\"Name\": \"${CADDY_CONTAINER_NAME}\""; then
      docker network connect "${DMAD_NETWORK}" "${CADDY_CONTAINER_NAME}"
      echo -e "➡️ Caddy Web Server container Joining to Caddy Network ${DMAD_NETWORK} success"
    fi
  fi
  echo "----------------------------------------------------------------"
  echo
  echo -e "➡️ Since you have provided information that you have Caddy Web Server installed, the system will not automatically install Caddy. If you want to configure domain for Wireguard and Pi-hole, you need to configure it manually in your Caddy Web Server!"
  echo
  echo -e "👉 Proceed to point domain ${WIREGUARD_URL} and ${PIHOLE_URL} to IP ${SERVER_IP}"
  echo
  echo -e "👉 Configure Caddy Web Server sites with the following information"
  echo
  echo -e "➡️ First, you need to allow Caddy Web Server container ${CADDY_CONTAINER_NAME} connect to ${DMAD_NETWORK}"
  echo -e "and, you need to configure reverse proxy for the wireguard and Pi-hole on the Caddy Web Server"
  echo -e "➡️ wireguard.${DMAD_DOMAIN} -> reverse_proxy to wg-easy:51821"
  echo -e "➡️ pihole.${DMAD_DOMAIN} -> reverse_proxy to pihole:80"
  echo
  echo "----------------------------------------------------------------"
  exit
  ;;
--self-update | -self-update | self-update)
  cd "$BASE_DIR" || {
    echo "Failed to change directory"
    exit 1
  }
  git fetch origin main && git pull
  exit
  ;;
--setup-completion | -setup-completion | setup-completion)
  sudo ln -s "${BASE_DIR}/dmad_completion.sh" /etc/bash_completion.d/dmad
  ;;
--pihole-subscribe-list | -pihole-subscribe-list | pihole-subscribe-list)
  docker exec -it pihole pihole -g
  ;;
--pihole-setpassword | -pihole-setpassword | pihole-setpassword)
  docker exec -it pihole sudo pihole setpassword
  ;;
*)
  echo "$1 in validate"
  exit 1
  ;;
esac
