#!/bin/bash
# Set BASE_DIR reliably based on main.sh location
if command -v realpath >/dev/null 2>&1; then
  BASE_DIR="$(dirname "$(realpath "$0")")"
else
  # Fallback for systems without realpath
  BASE_DIR="$(cd "$(dirname "$0")" && pwd)"
fi

# Export BASE_DIR to be available in sourced files
export BASE_DIR
has_command() {
  command -v "$1" >/dev/null 2>&1
}
ask_info() {
  local prompt_message=$1 # Prompt message
  local default_value=$2  # Default value for the default option
  local user_input        # User input
  if [ -z "$default_value" ]; then
    read -rp "${prompt_message}: " user_input
  else
    read -rp "${prompt_message} [Default is: ${default_value}]: " user_input
  fi
  echo "${user_input:-$default_value}"
}
ask_confirm() {
  local ask_confirm_msg confirmation
  ask_confirm_msg=$1
  echo -ne "${ask_confirm_msg} (Y/N, empty as No, press [Ctrl+C (macOS: Control+C)] to quit proceed): "
  read -r confirmation
  [[ $confirmation =~ ^(Y|y|YES|yes|Yes|OK|ok)$ ]]
}
generate_password() {
  head -c 24 /dev/urandom | base64 | tr -dc 'a-zA-Z0-9' | head -c 36
}
wait_for_health() {
  local container_name="$1"
  local service_type="$2"
  local retry_count=0
  local max_retries=20

  while [ "$(docker inspect --format='{{.State.Health.Status}}' "$container_name" 2>/dev/null)" != "healthy" ]; do
    echo "${service_type} → ${container_name} is not healthy yet. Retrying..."
    sleep 5
    ((retry_count++))

    if [ "$retry_count" -ge "$max_retries" ]; then
      echo "${service_type} → ${container_name} failed to become healthy after ${max_retries} attempts. Please check logs and try again"
      echo "Check docker logs: docker -f ${container_name} failed to become healthy"
      return 1
    fi
  done

  echoO "${service_type} → ${container_name} is healthy"
}
update_basic_auth() {
  if ask_confirm "Enable Basic Authentication for Wireguard and Pihole?"; then
    local username password hash_password
    username=$(ask_info "Enter a username for basic authentication" "admin")
    password=$(ask_info "Enter a password for basic authentication" "$(generate_password)")
    hash_password=$(docker exec -it caddy caddy hash-password --plaintext "${password}" | tr -d '\r')
    echo "🔐 Hashed Password: ${hash_password}"

    wait_for_health "caddy" "Caddy Web Server"

    if docker ps --format '{{.Names}} {{.Status}}' | grep -E '^caddy .*Up'; then
      if ask_confirm "Do you want to enable Basic Auth for Wireguard and Pihole?"; then
        source .env
        # Setting Caddyfile
        cat >Caddyfile <<EOL
# wg-easy
wireguard.${WG_HOST} {
    @acme_challenge {
        path /.well-known/acme-challenge/*
    }
    handle @acme_challenge {
        file_server
    }

    basic_auth {
        ${username} ${hash_password}
    }
    reverse_proxy 10.2.0.3:51821
}

# pihole
pihole.${WG_HOST} {
    @acme_challenge {
        path /.well-known/acme-challenge/*
    }
    handle @acme_challenge {
        file_server
    }

    basic_auth {
        ${username} ${hash_password}
    }
    reverse_proxy 10.2.0.100:80
}
EOL
        echo "✅ Enable Basic Authentication success"
        echo
        echo "--------------------------------"
        echo "Username: ${username}"
        echo "Password: ${password}"
        echo "Hash: ${hash_password}"
        echo "--------------------------------"
        echo
      else
        echo "❌ Basic Auth not enabled."
      fi
    else
      echo "❌ Caddy container is NOT running!"
    fi
  fi
}
update_basic_auth
